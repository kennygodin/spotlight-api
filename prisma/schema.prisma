generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  firstName    String
  lastName     String
  username  String?    @unique
  email     String    @unique
  bio       String?   
  clerkId   String    @unique
  imageUrl  String?
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  followers Follow[]  @relation("Followees")
  following Follow[]  @relation("Followers")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String?
  imageUrl  String
  userId    String
  user      User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]

  @@map("posts")
}

model Like {
  id     Int    @id @default(autoincrement())
  userId String
  postId Int
  user   User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

model Follow {
  id           Int    @id @default(autoincrement())
  followerId   String
  followingId  String

  follower     User   @relation("Followers", fields: [followerId], references: [clerkId], onDelete: Cascade)
  following    User   @relation("Followees", fields: [followingId], references: [clerkId], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
